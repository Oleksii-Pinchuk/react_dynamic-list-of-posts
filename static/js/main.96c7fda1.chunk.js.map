{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","api/users.ts","App.tsx","index.tsx"],"names":["PostsList","posts","postId","setPostId","className","map","post","userId","title","id","type","onClick","NewCommentForm","onSubmitAddComment","useState","name","setName","email","setEmail","body","setBody","isFormFilled","setIsFormFilled","onSubmit","event","preventDefault","trim","toLowerCase","match","placeholder","value","onChange","target","Loader","BASE_URL","getData","endpoint","a","fetch","response","json","Error","removeData","method","getPostComments","removeComment","commentId","addComment","headers","JSON","stringify","getUserPosts","getAllPosts","getPostDetails","PostDetails","setPost","comments","setComments","isHidden","setIsHidden","isLoaded","setIsLoaded","fetchPostComments","recievedComments","fetchPostDetails","recievedPost","useEffect","onRemoveComment","onAddComment","length","comment","UserSelect","users","setUserId","htmlFor","user","getAllUsers","App","selectedPostId","setSelectedPostId","selectedUserId","setSelectedUserId","setPosts","setUsers","isPostsLoaded","setIsPostsLoaded","fetchAllUsers","recievedUsers","fetchAllPosts","recievedPosts","fetchUserPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96c7fda1.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  postId: number,\n  setPostId: (postId: number) => void\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, postId, setPostId }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map((post) => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]:`}</b>\n              {post.title}\n            </div>\n\n            {post.id === postId ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setPostId(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setPostId(post.id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport './NewCommentForm.scss';\n\ntype Props = {\n  onSubmitAddComment: (name: string, email: string, body: string) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onSubmitAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isFormFilled, setIsFormFilled] = useState(true);\n\n  const changeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  const changeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const changeBody = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const validateEmail = (mail: string) => {\n    return mail\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      );\n  };\n\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (name.trim() && validateEmail(email) && body.trim()) {\n      setIsFormFilled(true);\n      onSubmitAddComment(name, email, body);\n      setName('');\n      setEmail('');\n      setBody('');\n    } else {\n      setIsFormFilled(false);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitForm}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={changeName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={changeEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={changeBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {!isFormFilled && (\n        <div className=\"NewCommentForm__error-message\">Filling form not completed!</div>\n      )}\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\n// export const getData = (endpoint: string) => {\n//   return fetch(`${BASE_URL}/${endpoint}`)\n//     .then(response => {\n//       if (!response.ok) {\n//         throw new Error();\n//       }\n\n//       return response.json();\n//     });\n// };\n\nexport const getData = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${endpoint}`);\n\n    return await response.json();\n  } catch (error) {\n    throw new Error();\n  }\n};\n\nexport const removeData = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${endpoint}`,\n      {\n        method: 'DELETE',\n      });\n\n    return await response.json();\n  } catch (error) {\n    throw new Error();\n  }\n};\n","import { getData, removeData, BASE_URL } from './api';\n\nexport const getAllComments = async (): Promise<Comment[]> => {\n  return getData('/comments');\n};\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => {\n  return getData(`/comments?postId=${postId}`);\n};\n\nexport const getCommentById = async (commentId: number): Promise<Comment> => {\n  return getData(`/comments/${commentId}`);\n};\n\nexport const removeComment = async (commentId: number) => {\n  return removeData(`/comments/${commentId}`);\n};\n\nexport const addComment = async (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  try {\n    const response = await fetch(`${BASE_URL}/comments`, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        postId,\n        name,\n        email,\n        body,\n      }),\n    });\n\n    return await response.json();\n  } catch (error) {\n    throw new Error();\n  }\n};\n","import { getData } from './api';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  return getData(`/posts?userId=${userId}`);\n};\n\nexport const getAllPosts = async (): Promise<Post[]> => {\n  return getData('/posts/');\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  return getData(`/posts/${postId}`);\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\n\nimport { getPostComments, removeComment, addComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\n\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number,\n\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isHidden, setIsHidden] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const fetchPostComments = async () => {\n    const recievedComments = await getPostComments(postId);\n\n    setComments(recievedComments);\n  };\n\n  const fetchPostDetails = async () => {\n    const recievedPost = await getPostDetails(postId);\n\n    setIsLoaded(true);\n    setPost(recievedPost);\n  };\n\n  useEffect(() => {\n    if (postId) {\n      fetchPostDetails();\n      fetchPostComments();\n    }\n  }, [postId]);\n\n  const onRemoveComment = async (commentId: number) => {\n    await removeComment(commentId);\n    fetchPostComments();\n  };\n\n  const onAddComment = async (name: string, email: string, body: string) => {\n    await addComment(postId, name, email, body);\n    fetchPostComments();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {isLoaded ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length !== 0 && (\n              <>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setIsHidden(!isHidden)}\n                >\n                  {`${isHidden ? 'Show' : 'Hide'} ${comments.length} comments`}\n                </button>\n\n                {!isHidden && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map((comment) => (\n                      <li\n                        className=\"PostDetails__list-item\"\n                        key={comment.id}\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => onRemoveComment(comment.id)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                onSubmitAddComment={onAddComment}\n              />\n            </div>\n          </section>\n        </>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './UserSelect.scss';\n\ntype Props = {\n  users: User[],\n  setUserId: (userId: number) => void,\n};\n\nexport const UserSelect: React.FC<Props> = ({ users, setUserId }) => {\n  const onChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+(event.target.value));\n  };\n\n  return (\n    <label htmlFor=\"userSelect\" className=\"UserSelect__label\">\n      Select a user: &nbsp;\n      <select\n        id=\"userSelect\"\n        className=\"App__user-selector\"\n        onChange={onChangeSelect}\n      >\n        <option value={0}>\n          All users\n        </option>\n\n        {users.map((user) => (\n          <option\n            key={user.id}\n            value={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n","import { getData } from './api';\n\nexport const getAllUsers = async (): Promise<User[]> => {\n  return getData('/users');\n};\n\nexport const getUserByName = async (username: string): Promise<User> => {\n  return getData(`/users?username=${username}`);\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  return getData(`/users/${userId}`);\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\nimport { Loader } from './components/Loader';\n\nimport { getAllPosts, getUserPosts } from './api/posts';\nimport { getAllUsers } from './api/users';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [isPostsLoaded, setIsPostsLoaded] = useState(false);\n\n  const fetchAllUsers = async () => {\n    const recievedUsers = await getAllUsers();\n\n    setUsers(recievedUsers);\n  };\n\n  useEffect(() => {\n    fetchAllUsers();\n  }, []);\n\n  const fetchAllPosts = async () => {\n    const recievedPosts = await getAllPosts();\n\n    setIsPostsLoaded(true);\n    setPosts(recievedPosts);\n  };\n\n  const fetchUserPosts = async () => {\n    const recievedPosts = await getUserPosts(selectedUserId);\n\n    setIsPostsLoaded(true);\n    setPosts(recievedPosts);\n  };\n\n  useEffect(() => {\n    if (!selectedUserId) {\n      fetchAllPosts();\n    } else {\n      fetchUserPosts();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          users={users}\n          setUserId={setSelectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isPostsLoaded ? (\n            <PostsList\n              posts={posts}\n              postId={selectedPostId}\n              setPostId={setSelectedPostId}\n            />\n          ) : (\n            <Loader />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails postId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}